#summary Introduction to Django-multilingual
#labels Featured

==Summary==

The Django-Multilingual extension allows you to transparently store content in multiple languages for set fields inside Django models. This is unlike Django [http://www.djangoproject.com/documentation/i18n/ i18n] which is a translation system used for static content.

==Features==

    * Transparent operation with Django allowing for dynamic data in multiple languages.
    * Automatically provides extra language fields in the Django Admin interface.
    * Easy to use template tags for data capture.

==Installation and Setup==

*Step 1:* Checkout from Subversion:
{{{
svn co http://django-multilingual.googlecode.com/svn/trunk/ multilingual
}}}
*Step 2:* Add the multilingual directory to your `PYTHONPATH`.

*Step 3:* Configure your app's `settings.py` file:

Add [http://www.djangoproject.com/documentation/settings/#languages LANGUAGES setting] this is the same setting that is used by Django's i18n.
{{{
LANGUAGES = (
    ('en', 'English'),
    ('pl', 'Polish'),
)
}}}

Add `DEFAULT_LANGUAGE`, in this example setting it to 1 would make the default English as it is first in the `LANGUAGES` list.
{{{
DEFAULT_LANGUAGE = 1
}}}
Add multilingual.context_processors.multilingual to `TEMPLATE_CONTEXT_PROCESSORS`, it should look something like this:
{{{
TEMPLATE_CONTEXT_PROCESSORS = (
    'django.core.context_processors.auth',
    'django.core.context_processors.debug',
    'django.core.context_processors.i18n',
    'multilingual.context_processors.multilingual',
)
}}}
Add multilingual to `INSTALLED_APPS`, it should look like this:
{{{
INSTALLED_APPS = (
     'django.contrib.auth',
     'django.contrib.contenttypes',
     'django.contrib.sessions',
     'django.contrib.sites',
     'django.contrib.admin',
     'multilingual',
)
}}}
*Step 4:* Model setup:

At the top of the model file import multilingual
{{{
import multilingual
}}}
Create the model, the sub-class translation contains all the fields that will have multiple language data. For example:
{{{
class Category(models.Model):
    parent = models.ForeignKey('self', blank=True, null=True)
    class Translation(multilingual.Translation):
        name = models.CharField(maxlength=250)
    class Admin:
        list_display = ('id', 'name',)
        search_fields = ('name')
    def __unicode__(self):
        return self.name
}}}
In the above example you can see that the multilingual field: 'name' can be used in the Admin internal class for display and search.

==Basic Usage==

For capturing data you can use template tag 'edit_translation', example using generic create_object view:

In url_patterns:
{{{
(r'^category/create/$', 'django.views.generic.create_update.create_object',{'model': Category})
}}}
In the template file:
{{{
{% load multilingual_tags %}

<form method="post" action="">
    {{ form.parent }}
    {% edit_translation form name "en" %}
    {% edit_translation form name "pl" %}
<input type="submit" />
</form>
}}}
For displaying data use:
{{{
{{ catergory.name_en }}
{{ catergory.name_pl }}
}}}
If you call `set_default_language('pl')` it will make `catergory.name` the same as `catergory.name_pl`


==How it works==

With the above Catergory model example, django-multilingual will actually create two models, Category containing the non-translatable fields (in this case: id and parent) and
CategoryTranslation containing all the translatable fields, the language id and a reference to the main Category model, however, django-multilingual flattens this out and will give the illusion of a model like this:
{{{
class Category(models.Model):
    parent = models.ForeignKey('self', blank=True, null=True)
    name_en = models.CharField(maxlength=250)
    name_pl = models.CharField(maxlength=250)
    name = models.CharField(maxlength=250)
}}}

==Issues and Limitations==

    * Does not work with [http://www.djangoproject.com/documentation/newforms/ newforms].
    * Certain bugs with Django. See RelevantDjangoBugs for a summary.

==Contact==