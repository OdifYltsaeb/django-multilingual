#summary Installing and setting up the Django-multilingual extension.
#labels Featured

==Installation and Setup==

*Step 1:* Checkout from Subversion:
{{{
svn co http://django-multilingual.googlecode.com/svn/trunk/ multilingual
}}}

  * Note: if you use newforms-admin instead of trunk, then make sure you apply this patch to Django: http://code.djangoproject.com/ticket/6075 or you will get errors when editing translations in admin interface.

*Step 2:* Add the multilingual directory to your `PYTHONPATH`.

*Step 3:* Configure your app's `settings.py` file:

Add [http://www.djangoproject.com/documentation/settings/#languages LANGUAGES setting] this is the same setting that is used by Django's i18n.
{{{
LANGUAGES = (
    ('en', 'English'),
    ('pl', 'Polish'),
)
}}}

Add `DEFAULT_LANGUAGE`, in this example setting it to 1 would make the default English as it is first in the `LANGUAGES` list.
{{{
DEFAULT_LANGUAGE = 1
}}}
Add multilingual.context_processors.multilingual to `TEMPLATE_CONTEXT_PROCESSORS`, it should look something like this:
{{{
TEMPLATE_CONTEXT_PROCESSORS = (
    'django.core.context_processors.auth',
    'django.core.context_processors.debug',
    'django.core.context_processors.i18n',
    'multilingual.context_processors.multilingual',
)
}}}
Add multilingual to `INSTALLED_APPS`, it should look like this:
{{{
INSTALLED_APPS = (
     'django.contrib.auth',
     'django.contrib.contenttypes',
     'django.contrib.sessions',
     'django.contrib.sites',
     'django.contrib.admin',
     'multilingual',
)
}}}
*Step 4:* Model setup:

At the top of the model file import multilingual
{{{
import multilingual
}}}
Create the model, the sub-class translation contains all the fields that will have multiple language data. For example:
{{{
class Category(models.Model):
    parent = models.ForeignKey('self', blank=True, null=True)
    class Translation(multilingual.Translation):
        name = models.CharField(maxlength=250)
    class Admin:
        list_display = ('id', 'name',)
        search_fields = ('name')
    def __unicode__(self):
        return self.name
}}}
In the above example you can see that the multilingual field: 'name' can be used in the Admin internal class for display and search.