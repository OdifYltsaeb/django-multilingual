#summary How to use the Django-multilingual extension
#labels Featured

==Installation and Setup==

*Step 1:* Checkout from Subversion:
{{{
svn co http://django-multilingual.googlecode.com/svn/trunk/ multilingual
}}}

  * Note: if you use newforms-admin instead of trunk, then make sure you apply this patch to Django: http://code.djangoproject.com/ticket/6075 or you will get errors when editing translations in admin interface.

*Step 2:* Add the multilingual directory to your `PYTHONPATH`.

*Step 3:* Configure your app's `settings.py` file:

Add [http://www.djangoproject.com/documentation/settings/#languages LANGUAGES setting] this is the same setting that is used by Django's i18n.
{{{
LANGUAGES = (
    ('en', 'English'),
    ('pl', 'Polish'),
)
}}}

Add `DEFAULT_LANGUAGE`, in this example setting it to 1 would make the default English as it is first in the `LANGUAGES` list.
{{{
DEFAULT_LANGUAGE = 1
}}}
Add multilingual.context_processors.multilingual to `TEMPLATE_CONTEXT_PROCESSORS`, it should look something like this:
{{{
TEMPLATE_CONTEXT_PROCESSORS = (
    'django.core.context_processors.auth',
    'django.core.context_processors.debug',
    'django.core.context_processors.i18n',
    'multilingual.context_processors.multilingual',
)
}}}
Add multilingual to `INSTALLED_APPS`, it should look like this:
{{{
INSTALLED_APPS = (
     'django.contrib.auth',
     'django.contrib.contenttypes',
     'django.contrib.sessions',
     'django.contrib.sites',
     'django.contrib.admin',
     'multilingual',
)
}}}
*Step 4:* Model setup:

At the top of the model file import multilingual
{{{
import multilingual
}}}
Create the model, the sub-class translation contains all the fields that will have multiple language data. For example:
{{{
class Category(models.Model):
    parent = models.ForeignKey('self', blank=True, null=True)
    class Translation(multilingual.Translation):
        name = models.CharField(maxlength=250)
    class Admin:
        list_display = ('id', 'name',)
        search_fields = ('name')
    def __unicode__(self):
        return self.name
}}}
In the above example you can see that the multilingual field: 'name' can be used in the Admin internal class for display and search.

You may also add a Meta inner class to the Translation class to configure the translation mechanism. Currently, the only properties recognized is:
  * {{{db_table}}} sets the database table name (default: {{{<model>_translation}}})

{{{
class Dog(models.Model):
    owner = models.ForeignKey(Human)
    class Translation(multilingual.Translation):
        breed = models.CharField(maxlength=50)
        class Meta:
            db_table = 'dog_languages_table'
}}}

*Step 5:* (Optional) Add middleware to set the default language.

Django contains middleware that automatically discovers the browser's language and allows the user to change it. All translated strings in Python code and templates are then automatically shown in this language. (See [http://www.djangoproject.com/documentation/i18n/ the official Django documentation].) You can use the same language as the default translation for model fields.

Add `multilingual.middleware.DefaultLanguageMiddleware` to `MIDDLEWARE_CLASSES`:
{{{
MIDDLEWARE_CLASSES = (
    ...
    'django.middleware.locale.LocaleMiddleware',
    'multilingual.middleware.DefaultLanguageMiddleware',
    ...
)
}}}

The multilingual middleware must come after the language discovery middleware, in this case `django.middleware.locale.LocaleMiddleware`.

*Step 6:* (Optional) Add the multilingual flatpages application

The Django [http://www.djangoproject.com/documentation/flatpages/ flatpages application] is "[...] a simple object with a URL, title and content. Use it for one-off, special-case pages, such as 'About' or 'Privacy Policy' pages, that you want to store in a database but for which you donâ€™t want to develop a custom Django application."

If you have a website in multiple languages you will want to have these pages in your supported languages. Django-multilingual comes with a version of flatpages that has translatable name and content fields. You install it by adding `multilingual.flatpages` to the installed applications list.

{{{
INSTALLED_APPS = (
    ...
    'multilingual',
    'multilingual.flatpages',
    ...
)
}}}

The multilingual flatpages should now be available in the admin interface. They use the same templates as the original flatpages application: `flatpages/base.html`. You will want to enable the middleware as described in step 5 if you want the pages to appear in the correct language automatically.

==Basic Usage==

For capturing data you can use template tag 'edit_translation', example using generic create_object view:

In url_patterns:
{{{
(r'^category/create/$', 'django.views.generic.create_update.create_object',{'model': Category})
}}}
In the template file:
{{{
{% load multilingual_tags %}

<form method="post" action="">
    {{ form.parent }}
    {% edit_translation form name "en" %}
    {% edit_translation form name "pl" %}
<input type="submit" />
</form>
}}}
For displaying data use:
{{{
{{ category.name_en }}
{{ category.name_pl }}
}}}
If you call `set_default_language('pl')` it will make `category.name` the same as `category.name_pl`. (This is what the middleware does for you automatically.)

If the language code contains a territory ('en-us') the dash should be replaced by an underscore. So the `name` field in British English would be specified like this: `category.name_en_gb`.


==How it works==

With the above Catergory model example, django-multilingual will actually create two models, Category containing the non-translatable fields (in this case: id and parent) and
CategoryTranslation containing all the translatable fields, the language id and a reference to the main Category model, however, django-multilingual flattens this out and will give the illusion of a model like this:
{{{
class Category(models.Model):
    parent = models.ForeignKey('self', blank=True, null=True)
    name_en = models.CharField(maxlength=250)
    name_pl = models.CharField(maxlength=250)
    name = models.CharField(maxlength=250)
}}}